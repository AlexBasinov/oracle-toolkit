# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Playbook pre_tasks
  hosts: dbasm
  gather_facts: false
  pre_tasks:
    - name: Check environment readiness
      include_role:
        name: common
        tasks_from: readiness_checks.yml
      vars:
        control_node_checks: true
        managed_host_checks: true
        become_user_check: root
      tags: readiness_checks
    - name: Determine specific release
      include_role:
        name: common
        tasks_from: populate-vars.yml

  roles:
    - common

  tasks:
    - name: Check if database is Oracle Restart/Clusterware configured
      shell: |
        set -o pipefail
        if srvctl config database -d {{ db_name }} &>/dev/null; then
          CLUSTERWARE_USER=$(ps -eo user,comm | awk '/(crsd|ocssd|evmd)\.bin/{print $1}' | sort -u)
        else
          CLUSTERWARE_USER=""
        fi
        echo "$CLUSTERWARE_USER"
      environment:
        ORACLE_HOME: "{{ oracle_home }}"
        ORACLE_SID: "{{ oracle_sid }}"
        PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
      register: clusterware_check
      become: true
      become_user: "{{ oracle_user }}"
      changed_when: false

    - name: Set variables based on the Restart/Clusterware findings
      set_fact:
        gi_install: "{{ (clusterware_check.stdout | length) > 0 }}"
        grid_user: "{{ clusterware_check.stdout if (clusterware_check.stdout | length) > 0 else oracle_user }}"

    - name: Values for variables gi_install and grid_user
      debug:
        msg:
          - "gi_install: {{ gi_install }}"
          - "grid_user: {{ grid_user }}"
        verbosity: 1

- name: Download patches
  hosts: dbasm
  pre_tasks:
    - name: Verify that Ansible on control node meets the version requirements
      assert:
        that: "ansible_version.full is version_compare('2.8', '>=')"
        fail_msg: "You must update Ansible to at least 2.8 to use these playbooks"
        success_msg: "Ansible version is {{ ansible_version.full }}, continuing"
  tasks:
    - include_role:
        name: swlib
        tasks_from: main.yml
      vars:
        patch_only: true
  become: false
  tags: download-patches

- name: OPatch Restart patch
  hosts: dbasm
  tasks:
    - include_role:
        name: patch
        tasks_from: main.yml
      when: hostvars[groups['dbasm'].0]['cluster_name'] | default('', true) | length == 0
  remote_user: "{{ oracle_user }}"
  become: true
  become_user: root
  tags: opatch_restart

- name: RAC install opatch
  hosts: dbasm
  tasks:
    - include_role:
        name: patch
        tasks_from: rac-ins-opatch.yml
      vars:
        db_config_type: RAC
      when: hostvars[groups['dbasm'].0]['cluster_name'] | default('', true) | length > 0
  tags: rac-ins-opatch

- name: RAC patch apply
  hosts: dbasm
  serial: 1
  order: inventory
  tasks:
    - include_role:
        name: patch
        tasks_from: rac-opatch.yml
      vars:
        db_config_type: RAC
      when: hostvars[groups['dbasm'].0]['cluster_name'] | default('', true) | length > 0
  tags: rac-opatch

- name: RAC database patch
  hosts: dbasm[0]
  tasks:
    - include_role:
        name: patch
        tasks_from: rac-dbpatch.yml
      vars:
        db_config_type: RAC
      when: hostvars[groups['dbasm'].0]['cluster_name'] | default('', true) | length > 0
  tags: rac-dbpatch
