# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Play | Set correct RDBMS release and set fact if this is a single node inventory
  hosts: dbasm
  gather_facts: false
  tasks:
    - name: Patch | include defaults
      include_vars:
        file: roles/common/defaults/main.yml

    - name: Patch | Get the highest version number from gi_patches array
      set_fact:
        # Using expression from bms-toolkit/roles/rac-db-setup/tasks/rac-db-install.yml Line 46
        highest_version_num: "{% if not ansible_loop.first %}{% if item is version(highest_version_num, '>=') %}{{ item }}{% else %}{{ highest_version_num }}{% endif %}{% else %}{{ item }}{% endif %}"
      loop: "{{ gi_patches | json_query('[?base==`' + oracle_ver + '`].release') }}"
      loop_control:
        extended: yes
      when:
        - oracle_rel is defined
        - oracle_rel != "base"

    - name: Patch | Set oracle_rel to highest_version_num if oracle_rel == 'latest'
      set_fact:
        oracle_rel: "{{ highest_version_num }}"
      when:
        - oracle_rel == 'latest'

    - name: Patch | Printing the Oracle Release that will be installed
      debug:
        msg:
          - "The Oracle Release that will be installed is : {{ oracle_rel }}"

- name: OPatch Restart patch
  hosts: dbasm
  pre_tasks:
  - name: Verify that Ansible on control node meets the version requirements
    assert:
      that: "ansible_version.full is version_compare('2.8', '>=')"
      fail_msg: "You must update Ansible to at least 2.8 to use these playbooks"
      success_msg: "Ansible version is {{ ansible_version.full }}, continuing"
  tasks:
  - include_role:
      name: patch
      tasks_from: main.yml
    when: hostvars[groups['dbasm'].0]['cluster_name']|default('', true)|length == 0
  remote_user: "{{ oracle_user }}"
  become: yes
  become_user: root
  tags: opatch_restart

- name: RAC patch apply
  hosts: dbasm
  serial: 1
  order: inventory
  tasks:
  - include_role:
      name: patch
      tasks_from: rac-opatch.yml
    vars:
      db_config_type: RAC
    when: hostvars[groups['dbasm'].0]['cluster_name']|default('', true)|length > 0
  tags: rac-opatch

- name: RAC database patch
  hosts: dbasm[0]
  tasks:
  - include_role:
      name: patch
      tasks_from: rac-dbpatch.yml
    vars:
      db_config_type: RAC
    when: hostvars[groups['dbasm'].0]['cluster_name']|default('', true)|length > 0
  tags: rac-dbpatch
