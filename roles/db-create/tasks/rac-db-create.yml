---
  - name: Test whether pmon process by same name already exists
    shell: "set -o pipefail; ps -ef | ( grep pmon || true ) | ( grep -i {{ db_name }} || true ) | ( grep -v grep || true ) | wc -l"
    changed_when: false
    register: pmon_proc
    tags: rac-db-create

  - name: Check if database is already created
    shell: "set -o pipefail; ( grep -i {{ db_name }}: /etc/oratab || true ) | wc -l"
    changed_when: false
    register: check_oratab
    tags: rac-db-create

  - name: Database exists check results
    debug:
      msg: "{{ item }}"
      verbosity: 1
    with_items:
      - "{{ pmon_proc }}"
      - "{{ check_oratab }}"
    tags: rac-db-create

  - name: Adjust instance memory values
    set_fact:
      sga_target_bytes: "{{ sga_target }}"
      pga_aggtar_bytes: "{{ pga_aggtar }}"
    when: oracle_ver not in ['12.1.0.2.0','11.2.0.4.0']
    tags: db-create

  - name: Adjust instance memory values for 12.1 and 11.2
    set_fact:
      sga_target_bytes: "{{ sga_target | regex_replace('M$','') }}"
      pga_aggtar_bytes: "{{ pga_aggtar | regex_replace('M$','') }}"
    when: oracle_ver in ['12.1.0.2.0','11.2.0.4.0']
    tags: rac-db-create

  - name: Random password for sys
    block:
      - include_role:
          name: pwgen
        vars:
          pwgen_len: 12
          pwgen_chars: "P123456789"
      - set_fact: pass_sys="{{ pwgen_output.stdout }}"
    tags: rac-db-create

  - name: Random password for system
    block:
      - include_role:
          name: pwgen
        vars:
          pwgen_len: 12
          pwgen_chars: "P123456789"
      - set_fact: pass_system="{{ pwgen_output.stdout }}"
    tags: rac-db-create

  - name: Random password for pdbAdmin
    block:
      - include_role:
          name: pwgen
        vars:
          pwgen_len: 12
          pwgen_chars: "P123456789"
      - set_fact: pass_pdbadmin="{{ pwgen_output.stdout }}"
    tags: rac-db-create

  - name: Add group write permission for admin directory
    file:
      path: "{{ oracle_base }}/admin"
      state: directory
      mode: g+w
    become: true
    become_user: root
    tags: rac-db-create

  - name: Create admin database directory
    file:
      path: "{{ oracle_base }}/admin/{{ db_name }}"
      state: directory
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
      mode: g+w
    delegate_to: "{{ item }}"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    become: true
    become_user: root
    tags: rac-db-create

  - name: Create pfile directory
    file:
      path: "{{ oracle_base }}/admin/{{ db_name }}/pfile"
      state: directory
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
      mode: g+w
    delegate_to: "{{ item }}"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    become: true
    become_user: root
    tags: rac-db-create

  - name: Create adump directory
    file:
      path: "{{ oracle_base }}/admin/{{ db_name }}/adump"
      state: directory
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
      mode: g+w
    delegate_to: "{{ item }}"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    become: true
    become_user: root
    tags: rac-db-create

  - name: Create database directory under cfgtoollogs
    file:
      path: "{{ oracle_base }}/cfgtoollogs/dbca/{{ db_name }}"
      state: directory
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
      mode: g+w
    delegate_to: "{{ item }}"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    become: true
    become_user: root
    tags: rac-db-create

  - name: Create audit directory
    file:
      path: "{{ oracle_base }}/audit"
      state: directory
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
      mode: g+w
    delegate_to: "{{ item }}"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    become: true
    become_user: root
    tags: rac-db-create

  - name: Create DBCA response file
    template:
      src: dbca.rsp.{{ oracle_ver }}.j2
      dest: "{{ swlib_unzip_path }}/dbca_{{ db_name }}.rsp"
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
    when: pmon_proc.stdout == "0" and check_oratab.stdout == "0"
    become: yes
    become_user: "{{ oracle_user }}"
    tags: rac-db-create

  - name: Create database using dbca
    block:
    - name: Run dbca
      shell: |
        set -o pipefail
        export PATH={{ oracle_home }}/bin:${PATH}:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin
        dbca -silent -createDatabase -redoLogFileSize {{ redologsize }} -responseFile {{ swlib_unzip_path }}/dbca_{{ db_name }}.rsp -ignorePreReqs -ignorePrereqFailure
      register: dbca_output
      failed_when: "'Completing Database Creation' not in dbca_output.stdout or '100% complete' not in dbca_output.stdout"
      when: pmon_proc.stdout == "0" and check_oratab.stdout == "0"
      become: yes
      become_user: "{{ oracle_user }}"
      tags: rac-db-create
    rescue:
    - name: Retrieve dbca logs
      slurp:
        src: "{{ oracle_base }}/cfgtoollogs/dbca/{{ db_name }}/{{ db_name }}.log"
      register: dbcalog
    - debug: msg="{{ dbcalog['content'] | b64decode}}"

  - name: DBCA output
    debug:
      msg:
        - "{{ dbca_output.cmd }}"
        - "{{ dbca_output.stdout_lines }}"
    when: pmon_proc.stdout == "0" and check_oratab.stdout == "0"
    tags: rac-db-create

