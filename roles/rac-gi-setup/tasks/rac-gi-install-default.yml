  - name: rac-gi-install | set facts
    set_fact:
      install_unzip_path: "{{ grid_home }}"
      installer_command:  "{{ grid_home }}/gridSetup.sh"
      cluvfy_command:     "{{ grid_home }}/runcluvfy.sh stage -pre crs -verbose"
    tags: rac-gi

  - name: rac-gi-install | Installer confirmation
    debug:
      msg:
        - "Installing from file : {{ swlib_path }}/{{ osw_files }}"
        - "Unzipping into dir   : {{ install_unzip_path }}"
        - "Using cluvfy cmd     : {{ cluvfy_command }}"
        - "Using installer cmd  : {{ installer_command }}"
    tags: rac-gi

  - name: rac-gi-install | create GI directories
    file:
      path: "{{ install_unzip_path }}"
      state: directory
      owner: "{{ grid_user }}"
      group: "{{ oracle_group }}"
      mode: '0770'
    become: yes
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    delegate_to: "{{ item }}"
    tags: rac-gi,gi-dirs

  - name: rac-gi-install | Unzipping
    unarchive:
      src: "{{ swlib_path }}/{{ item }}"
      dest: "{{ install_unzip_path }}"
      remote_src: yes
    with_items:
      - "{{ osw_files }}"
    become: yes
    become_user: "{{ grid_user }}"
    tags: rac-gi,sw-unzip

  - name: rac-gi-install | Get symlinks for devices
    #if mapper in disk name - info taken from whole disk,
    #otherwise from first partition
    shell: |
      udevadm info --query=all --name={% if item is search ('mapper') %}{{ item }}{% else %}{{ item }}1{% endif %} | grep "^S: " | grep oracleasm | awk '{ print "/dev/"$2 }'
    loop: "{{ asm_disks | json_query('[?diskgroup==`' + hostvars[groups['dbasm'].0]['dg_name'] + '`].disks[*].blk_device') | list | join() }}"
    when: lookup('env', 'ORA_DISK_MGMT') == "UDEV"
    become: True
    become_user: root
    register: symlink

  - name: rac-gi-install | Generate random password
    include_role:
      name: pwgen
    vars:
      pwgen_len: 12
      pwgen_chars: "$#_"
    tags: rac-gi

  - name: rac-gi-install | Set password for asmsys
    set_fact: pass_asmsys="{{ pwgen_output.stdout }}"
    tags: rac-gi

  - name: rac-gi-install | Generate random password
    include_role:
      name: pwgen
    vars:
      pwgen_len: 12
      pwgen_chars: "$#_"
    tags: rac-gi

  - name: rac-gi-install | Set password for asmmon
    set_fact: pass_asmmon="{{ pwgen_output.stdout }}"
    tags: rac-gi

  - name: rac-gi-install | Create GI response file
    template:
      src: gridsetup.rsp.{{ oracle_ver }}.j2
      dest: "{{ install_unzip_path }}/gridsetup.rsp"
    become: yes
    become_user: "{{ grid_user }}"
    tags: rac-gi,rac-gi-response

  - name: rac-gi-install | Run installer
    command: "{{ installer_command }} -silent -responseFile {{ install_unzip_path }}/gridsetup.rsp -ignorePrereqFailure"
    register: install_rac_gi
    failed_when: "('Successfully Setup Software' not in install_rac_gi.stdout) or
                  (install_rac_gi.rc not in [0,6,250])"
    become: yes
    become_user: "{{ grid_user }}"
    tags: rac-gi,rac-gi-install

  - name: rac-gi-install | Installer output
    debug:
      msg:
        - "{{ install_rac_gi.cmd }}"
        - "{{ install_rac_gi.stdout_lines }}"
    tags: rac-gi,rac-gi-install

  - name: rac-gi-install | run root-script orainstRoot.sh
    command: "{{ oracle_root }}/oraInventory/orainstRoot.sh"
    ignore_errors: yes
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    delegate_to: "{{ item }}"
    when: "'skipped' not in install_rac_gi.stdout"
    become: yes
    become_user: root
    tags: rac-gi,root-scripts

  - name: rac-gi-install | run root-script root.sh
    command: "{{ grid_home }}/root.sh"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    delegate_to: "{{ item }}"
    when: "'skipped' not in install_rac_gi.stdout"
    become: yes
    become_user: root
    tags: rac-gi,root-scripts

  - name: rac-gi-install | Complete plugin configuration
    command: "{{ installer_command }} -executeConfigTools -silent -responseFile {{ install_unzip_path }}/gridsetup.rsp"
    register: gi_plugins
    ignore_errors: yes
    become: yes
    become_user: "{{ grid_user }}"
    tags: rac-gi

  - include_tasks: rac-asm-create.yml
