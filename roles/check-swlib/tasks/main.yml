# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: check-swlib | Determine required installation files
  include_role:
    name: swlib
    tasks_from: build_file_list.yml

- name: check-swlib | Validate base software release
  shell: |
    set -o pipefail
    if gcloud storage objects describe gs://"{{ swlib_mount_src }}/{{ item.name }}" >/dev/null 2>&1; then
      f_name="{{ item.name }}"
      expected_md5="{{ item.md5sum }}"
    else
      f_name="{{ item.alt_name | default('x') }}"
      expected_md5="{{ item.alt_md5sum | default('x') }}"
    fi
    actual_md5=$(gcloud storage objects describe gs://"{{ swlib_mount_src }}/${f_name}" --format="value(md5Hash)")
    if [[ "$?" -ne "0" ]] ; then
      echo "ERROR locating {{ item.name }}{% if item.alt_name is defined and item.alt_name | length > 0 %} or {{ item.alt_name }}{% endif %}"
    else
      if [[ "$actual_md5" != "$expected_md5" ]]; then
        echo "ERROR in {{ item.name }} md5: expected $expected_md5, but got $actual_md5 for ${f_name}"
      fi
    fi
  args:
    executable: /bin/bash
  failed_when: "'ERROR' in base_repo_files.stdout"
  changed_when: false
  ignore_errors: true
  when: item.name is not search('^https?://.*oracle\.com/.*$')
  with_items: "{{ (gi_base_files | default([]) + rdbms_base_files) | unique }}"
  register: base_repo_files

- name: check-swlib | Validate patchsets
  shell: |
    set -o pipefail
    actual_md5=$(gcloud storage objects describe gs://"{{ swlib_mount_src }}/{{ item.patchfile }}" --format="value(md5Hash)")
    if [[ "$?" -ne "0" ]] ; then
      echo "ERROR locating {{ item.patchfile }}"
    else
      if [[ "$actual_md5" != "{{ item.md5sum }}" ]]; then
        echo "ERROR in {{ item.patchfile }} md5: expected {{ item.md5sum }}, but got $actual_md5 for {{ item.patchfile }}"
      fi
    fi
  args:
    executable: /bin/bash
  failed_when: "'ERROR' in patch_repo_files.stdout"
  changed_when: false
  ignore_errors: true
  with_items: "{{ patch_details_list | default([]) | unique }}"
  register: patch_repo_files

# We can't reliably check hashes for OPatch, as the same file name
# can have different values based on version.
- name: check-swlib | Validate OPatch patches
  shell: |
    gcloud storage objects describe gs://"{{ swlib_mount_src }}/{{ item }}" --format="value(size)"
  args:
    executable: /bin/bash
  failed_when: opatch_repo_files.stdout <= "0"
  changed_when: false
  ignore_errors: true
  with_items: "{{ opatch_file_list }}"
  register: opatch_repo_files

- name: check-swlib | Report gcloud command failures (base)
  assert:
    that: item.failed is defined and not item.failed
    quiet: true
  with_items: "{{ base_repo_files | json_query('results[*].{name:item.name,alt_name:alt_name,failed:failed,stdout:stdout}') }}"
  when: item.name is not search('^https?://.*oracle\.com/.*$')

- name: check-swlib | Report gcloud command failures (patch)
  assert:
    that: item.failed is defined and not item.failed
    quiet: true
    fail_msg: "ERROR: {{ item.category | default('') }} patch {{ item.patchfile }}: {{ item.stdout | default('') }} {{ item.stderr | default('') }}"
  with_items:
    - "{{ patch_repo_files | json_query('results[*].{category:item.category,patchfile:item.patchfile,failed:failed,stdout:stdout,stderr:stderr}') }}"
    - "{{ opatch_repo_files | json_query('results[*].{patchfile:item,failed:failed,stderr:stderr}') }}"
