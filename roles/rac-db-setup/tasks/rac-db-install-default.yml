---
  - name: Check if software is already installed
    shell: cat "{{ oracle_inventory }}/ContentsXML/inventory.xml" 2>&1 | ( grep -w {{ oracle_home }} || true ) | wc -l
    register: existing_dbhome
    become: yes
    become_user: root
    ignore_errors: yes
    changed_when: false
    failed_when: false
    tags: rac-db

  - name: OH Confirmation
    debug:
      msg: "Installing ORACLE_HOME - {{ oracle_home }}"
    when: existing_dbhome.stdout == "0"
    tags: rac-db

  - name: rac-db-install | set facts
    set_fact:
      install_unzip_path: "{% if oracle_ver_base in ('19.3','18.0') %}{{ oracle_home }}{% else %}{{ swlib_path }}{% endif %}"
      runinstaller_loc: "{% if oracle_ver_base in ('19.3','18.0') %}{{ oracle_home }}{% else %}{{ swlib_path }}/database{% endif %}"
    tags: rac-db

  - name: rac-db-install | Installer confirmations
    debug:
      msg:
        - "Installing from file : {{ swlib_path }}/{{ osw_files }}"
        - "Unzipping into dir   : {{ install_unzip_path }}"
        - "Using installer dir  : {{ runinstaller_loc }}"
    tags: rac-db

  - name: rac-db-install | create DB directories
    file:
      path: "{{ install_unzip_path }}"
      state: directory
      owner: "{{ oracle_user }}"
      group: "{{ oracle_group }}"
      mode: '0770'
    become: yes
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    delegate_to: "{{ item }}"
    tags: rac-db,db-dirs

  - name: rac-db-install | Unzipping
    unarchive:
      src: "{{ swlib_path }}/{{ item }}"
      dest: "{{ install_unzip_path }}"
      remote_src: yes
    with_items:
      - "{{ osw_files }}"
    become: yes
    become_user: "{{ oracle_user }}"
    tags: rac-db,sw_unzip

  - name: rac-db-install | Create DB response file script
    template:
      src: db_install.rsp.{{ oracle_ver }}.j2
      dest: "{{ install_unzip_path }}/db_install.rsp"
    become: yes
    become_user: "{{ oracle_user }}"
    tags: rac-db,rac-db-response

  - name: rac-db-install | Run runInstaller
    command: "{{ runinstaller_loc }}/runInstaller -silent -waitforcompletion -responseFile {{ install_unzip_path }}/db_install.rsp -ignorePrereqFailure"
    register: install_rac_db
    failed_when: "('Successfully Setup Software' not in install_rac_db.stdout) or
                  (install_rac_db.rc not in [0,6,250])"
    become: yes
    become_user: "{{ oracle_user }}"
    tags: rac-db,rac-db-install

  - name: rac-db-install | Installer output
    debug:
      msg:
        - "{{ install_rac_db.cmd }}"
        - "{{ install_rac_db.stdout_lines }}"
    tags: rac-db,rac-db-install

  - name: rac-db-install | run root-script root.sh
    command: "{{ oracle_home }}/root.sh"
    loop: "{{ lookup('inventory_hostnames', 'dbasm', wantlist=True) }}"
    delegate_to: "{{ item }}"
    become: yes
    become_user: root
    tags: rac-db,root-scripts
