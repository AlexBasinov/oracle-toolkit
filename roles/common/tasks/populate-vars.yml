# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: populate-vars | Resolve software release
  #if release set to latest then get most recent release from gi_patches array
  #if nothing returned then set to "base" in next task
  set_fact:
    oracle_rel: "{% if not ansible_loop.first %}{% if item is version(oracle_rel, '>=') %}{{ item }}{% else %}{{ oracle_rel }}{% endif %}{% else %}{{ item }}{% endif %}"
  loop: "{{ gi_patches | selectattr('base', 'match', oracle_ver) | map(attribute='release') | list }}"
  loop_control:
    extended: yes
  when:
    - oracle_rel is defined
    - oracle_rel != "base"
  tags: oracle-rel

- name: populate-vars | Set base if no release found
  set_fact:
    oracle_rel: "{% if oracle_rel is search('latest') %}base{% else %}{{ oracle_rel }}{% endif %}"
  when:
    - oracle_rel is defined
    - oracle_rel != "base"
  tags: oracle-rel

- name: populate-vars | Show resolved release
  debug:
    var:
      oracle_rel
  tags: oracle-rel

- name: Resolve the symlinks
  ansible.builtin.shell:
    cmd: "realpath {{ item  }}"
  loop: "{{ asm_disks | map(attribute='disks') | flatten | map(attribute='blk_device') }}"
  register: realpath_output
  tags: asm-disks

- name: Create a copy of the asm_disks with the blk_device set to the canonical path
  set_fact:
    asm_disks_normalized: "{{ asm_disks_normalized | default([]) + [item.1 | combine({'disks': item.1.disks | map('combine', {'blk_device': item.0.stdout}) | list })] }}"
  with_together:
    - "{{ realpath_output.results }}"
    - "{{ asm_disks }}"
  when: item.0.rc == 0 and item.1 is not none
  tags: asm-disks

- name: Update asm_disks
  set_fact:
    asm_disks: "{{asm_disks_normalized}}"
  tags: asm-disks

- name: Resolve the symlinks
  ansible.builtin.shell:
    cmd: "realpath {{ item.blk_device }}"
  loop: "{{ oracle_user_data_mounts }}"
  register: realpath_result
  tags: ora-mounts

- name: Create a dictionary with blk_device as keys and real_path as values
  ansible.builtin.set_fact:
    normalized_blk_device_paths: "{{ dict(realpath_result.results | map(attribute='item.blk_device') | zip(realpath_result.results | map(attribute='stdout'))) }}"
  tags: ora-mounts

- name: Update oracle_user_data_mounts with normalized blk_device paths
  ansible.builtin.set_fact:
    oracle_user_data_mounts_normalized: "{{ oracle_user_data_mounts_normalized | default([]) + [item | combine({'blk_device': normalized_blk_device_paths[item.blk_device]})] }}"
  loop: "{{ oracle_user_data_mounts }}"
  loop_control:
    extended: yes
  tags: ora-mounts

- name: Update oracle_user_data_mounts
  set_fact:
    oracle_user_data_mounts: "{{oracle_user_data_mounts_normalized}}"
  tags: ora-mounts
