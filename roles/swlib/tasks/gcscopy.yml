# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: gcscopy | Copy GI software from GCS to target instance
  shell: |
    set -o pipefail
    {% for i in item.files %}
    if ! ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "unzip -l {{ swlib_path }}/{{ i }}"
      then
        gsutil cat gs://{{ swlib_mount_src }}/{{ i }} | ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ i }}"
    fi
        {% endfor %}
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ gi_software }}"
    - "{{ gi_interim_patches }}"
  when: item.version == oracle_ver and patching_type is not defined
  changed_when: "'Date    Time    Name' not in shell_result.stdout"
  delegate_to: 127.0.0.1

- name: gcscopy | Copy GI patches from GCS to target instance
  shell: |
    set -o pipefail
    if ! ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "unzip -l {{ swlib_path }}/{{ item.patchfile }}"
      then
        gsutil cat gs://{{ swlib_mount_src }}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
    fi
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ gi_patches }}"
  when: item.release == oracle_rel and patching_type == "gi_patching"
  changed_when: "'Date    Time    Name' not in shell_result.stdout"
  delegate_to: 127.0.0.1

- name: gcscopy | Copy GI OPatch update files from GCS to target instance
  shell: |
    set -o pipefail
    if ! ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "unzip -l {{ swlib_path }}/{{ item.patchfile }}"
      then
        gsutil cat gs://{{ swlib_mount_src }}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
    fi
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ opatch_patches }}"
  when: item.release == oracle_ver and oracle_rel != "base" and patching_type is defined
  changed_when: "'Date    Time    Name' not in shell_result.stdout"
  delegate_to: 127.0.0.1

- name: gcscopy | Copy RDBMS software from GCS to target instance
  shell: |
    set -o pipefail
    {% for i in item.files %}
    if ! ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "unzip -l {{ swlib_path }}/{{ i }}"
      then
        gsutil cat gs://{{ swlib_mount_src }}/{{ i }} | ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ i }}"
    fi
        {% endfor %}
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ rdbms_software }}"
  when: item.version == oracle_ver and patching_type is not defined
  changed_when: "'Date    Time    Name' not in shell_result.stdout"
  delegate_to: 127.0.0.1

- name: gcscopy | Copy RDBMS patches from GCS to target instance
  shell: |
    set -o pipefail
    if ! ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "unzip -l {{ swlib_path }}/{{ item.patchfile }}"
      then
        gsutil cat gs://{{ swlib_mount_src }}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
    fi
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ rdbms_patches }}"
  when: item.release == oracle_rel and patching_type == "db_patching"
  changed_when: "'Date    Time    Name' not in shell_result.stdout"
  delegate_to: 127.0.0.1
